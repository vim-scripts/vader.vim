# Test case
Execute (Assert and AssertEqual command):
  Assert 1 == 1
  AssertEqual 'hey', tolower('HEY')
  AssertEqual 'suite1.vader', fnamemodify(g:vader_file, ':t')
  AssertThrows call reverse('not a list')

Execute (AssertThrows expects an exception to be thrown):
  AssertThrows call reverse([1, 2, 3])

Execute (Optional message parameter to Assert command):
  Assert 1 == 2, '1 is not equal to 2'

Given ruby (Block content is injected and highlighted as ruby code):
  def a
    a = 1
    end

Do (Do block content is keystrokes in normal mode):
  vip
  =

Expect ruby (Expect block content should match the result of previous Do block):
  def a
    a = 1
  end

Expect ruby (Previous Given block is repeated, thus this should fail):
  def b
    a = 1
  end

Do (Indent and shift given ruby code):
  vip
  =
  gv
  >

Expect ruby (indented and shifted):
    def a
      a = 1
    end

Do (Execute a non-existent command should raise an error):
  :non-existent-command\<Enter>
